//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MapD_connect_args = function(args) {
  this.user = null;
  this.passwd = null;
  this.dbname = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
    if (args.dbname !== undefined && args.dbname !== null) {
      this.dbname = args.dbname;
    }
  }
};
MapD_connect_args.prototype = {};
MapD_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 2);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  if (this.dbname !== null && this.dbname !== undefined) {
    output.writeFieldBegin('dbname', Thrift.Type.STRING, 3);
    output.writeString(this.dbname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_connect_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_connect_result.prototype = {};
MapD_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_connect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_connect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_disconnect_args.prototype = {};
MapD_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_disconnect_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_disconnect_result.prototype = {};
MapD_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_disconnect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_server_status_args.prototype = {};
MapD_get_server_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_server_status_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TServerStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_server_status_result.prototype = {};
MapD_get_server_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TServerStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_server_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_server_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_args = function(args) {
  this.session = null;
  this.query = null;
  this.column_format = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.column_format !== undefined && args.column_format !== null) {
      this.column_format = args.column_format;
    }
  }
};
MapD_sql_execute_args.prototype = {};
MapD_sql_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.column_format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.column_format !== null && this.column_format !== undefined) {
    output.writeFieldBegin('column_format', Thrift.Type.BOOL, 3);
    output.writeBool(this.column_format);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_sql_execute_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TQueryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_sql_execute_result.prototype = {};
MapD_sql_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TQueryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_sql_execute_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_sql_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_table_descriptor_args.prototype = {};
MapD_get_table_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_table_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_table_descriptor_result.prototype = {};
MapD_get_table_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size88 = 0;
        var _rtmp392;
        this.success = {};
        var _ktype89 = 0;
        var _vtype90 = 0;
        _rtmp392 = input.readMapBegin();
        _ktype89 = _rtmp392.ktype;
        _vtype90 = _rtmp392.vtype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          if (_i93 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key94 = null;
          var val95 = null;
          key94 = input.readString().value;
          val95 = new TColumnType();
          val95.read(input);
          this.success[key94] = val95;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_table_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_table_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter96 in this.success)
    {
      if (this.success.hasOwnProperty(kiter96))
      {
        var viter97 = this.success[kiter96];
        output.writeString(kiter96);
        viter97.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_args = function(args) {
  this.session = null;
  this.table_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
MapD_get_row_descriptor_args.prototype = {};
MapD_get_row_descriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_row_descriptor_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TColumnType]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_row_descriptor_result.prototype = {};
MapD_get_row_descriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.success = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new TColumnType();
          elem104.read(input);
          this.success.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_row_descriptor_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_row_descriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter105 in this.success)
    {
      if (this.success.hasOwnProperty(iter105))
      {
        iter105 = this.success[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
  }
};
MapD_get_frontend_view_args.prototype = {};
MapD_get_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_view_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_frontend_view_result.prototype = {};
MapD_get_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_tables_args.prototype = {};
MapD_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_tables_result.prototype = {};
MapD_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.success = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = input.readString().value;
          this.success.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter113 in this.success)
    {
      if (this.success.hasOwnProperty(iter113))
      {
        iter113 = this.success[iter113];
        output.writeString(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_args = function(args) {
};
MapD_get_users_args.prototype = {};
MapD_get_users_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_users_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_users_result.prototype = {};
MapD_get_users_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readString().value;
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_users_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_users_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        output.writeString(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_args = function(args) {
};
MapD_get_databases_args.prototype = {};
MapD_get_databases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_databases_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TDBInfo]);
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_databases_result.prototype = {};
MapD_get_databases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.success = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = new TDBInfo();
          elem128.read(input);
          this.success.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_databases_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_databases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter129 in this.success)
    {
      if (this.success.hasOwnProperty(iter129))
      {
        iter129 = this.success[iter129];
        iter129.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_args = function(args) {
  this.session = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
  }
};
MapD_get_frontend_views_args.prototype = {};
MapD_get_frontend_views_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_frontend_views_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TFrontendView]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_frontend_views_result.prototype = {};
MapD_get_frontend_views_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.success = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = new TFrontendView();
          elem136.read(input);
          this.success.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_frontend_views_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_frontend_views_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter137 in this.success)
    {
      if (this.success.hasOwnProperty(iter137))
      {
        iter137 = this.success[iter137];
        iter137.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_args = function(args) {
  this.session = null;
  this.mode = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
MapD_set_execution_mode_args.prototype = {};
MapD_set_execution_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 2);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_set_execution_mode_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_set_execution_mode_result.prototype = {};
MapD_set_execution_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_set_execution_mode_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_set_execution_mode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_args = function(args) {
};
MapD_get_version_args.prototype = {};
MapD_get_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_version_result = function(args) {
  this.success = null;
  this.te = null;
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_version_result.prototype = {};
MapD_get_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_version_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TRow]);
    }
  }
};
MapD_load_table_binary_args.prototype = {};
MapD_load_table_binary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.rows = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new TRow();
          elem144.read(input);
          this.rows.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter145 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter145))
      {
        iter145 = this.rows[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_binary_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_load_table_binary_result.prototype = {};
MapD_load_table_binary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_binary_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_binary_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.rows = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [TStringRow]);
    }
  }
};
MapD_load_table_args.prototype = {};
MapD_load_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.rows = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = new TStringRow();
          elem152.read(input);
          this.rows.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter153 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter153))
      {
        iter153 = this.rows[iter153];
        iter153.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_load_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_load_table_result.prototype = {};
MapD_load_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_load_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_load_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_args = function(args) {
  this.session = null;
  this.query = null;
  this.render_type = null;
  this.render_properties = null;
  this.col_render_properties = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.render_type !== undefined && args.render_type !== null) {
      this.render_type = args.render_type;
    }
    if (args.render_properties !== undefined && args.render_properties !== null) {
      this.render_properties = Thrift.copyMap(args.render_properties, [TRenderProperty]);
    }
    if (args.col_render_properties !== undefined && args.col_render_properties !== null) {
      this.col_render_properties = Thrift.copyMap(args.col_render_properties, [null]);
    }
  }
};
MapD_render_args.prototype = {};
MapD_render_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.render_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size154 = 0;
        var _rtmp3158;
        this.render_properties = {};
        var _ktype155 = 0;
        var _vtype156 = 0;
        _rtmp3158 = input.readMapBegin();
        _ktype155 = _rtmp3158.ktype;
        _vtype156 = _rtmp3158.vtype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          if (_i159 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key160 = null;
          var val161 = null;
          key160 = input.readString().value;
          val161 = new TRenderProperty();
          val161.read(input);
          this.render_properties[key160] = val161;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size162 = 0;
        var _rtmp3166;
        this.col_render_properties = {};
        var _ktype163 = 0;
        var _vtype164 = 0;
        _rtmp3166 = input.readMapBegin();
        _ktype163 = _rtmp3166.ktype;
        _vtype164 = _rtmp3166.vtype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          if (_i167 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key168 = null;
          var val169 = null;
          key168 = input.readString().value;
          var _size170 = 0;
          var _rtmp3174;
          val169 = {};
          var _ktype171 = 0;
          var _vtype172 = 0;
          _rtmp3174 = input.readMapBegin();
          _ktype171 = _rtmp3174.ktype;
          _vtype172 = _rtmp3174.vtype;
          _size170 = _rtmp3174.size;
          for (var _i175 = 0; _i175 < _size170; ++_i175)
          {
            if (_i175 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key176 = null;
            var val177 = null;
            key176 = input.readString().value;
            val177 = new TRenderProperty();
            val177.read(input);
            val169[key176] = val177;
          }
          input.readMapEnd();
          this.col_render_properties[key168] = val169;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.render_type !== null && this.render_type !== undefined) {
    output.writeFieldBegin('render_type', Thrift.Type.STRING, 3);
    output.writeString(this.render_type);
    output.writeFieldEnd();
  }
  if (this.render_properties !== null && this.render_properties !== undefined) {
    output.writeFieldBegin('render_properties', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.render_properties));
    for (var kiter178 in this.render_properties)
    {
      if (this.render_properties.hasOwnProperty(kiter178))
      {
        var viter179 = this.render_properties[kiter178];
        output.writeString(kiter178);
        viter179.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.col_render_properties !== null && this.col_render_properties !== undefined) {
    output.writeFieldBegin('col_render_properties', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.col_render_properties));
    for (var kiter180 in this.col_render_properties)
    {
      if (this.col_render_properties.hasOwnProperty(kiter180))
      {
        var viter181 = this.col_render_properties[kiter180];
        output.writeString(kiter180);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter181));
        for (var kiter182 in viter181)
        {
          if (viter181.hasOwnProperty(kiter182))
          {
            var viter183 = viter181[kiter182];
            output.writeString(kiter182);
            viter183.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_render_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_render_result.prototype = {};
MapD_render_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_render_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_render_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_args = function(args) {
  this.session = null;
  this.view_name = null;
  this.view_state = null;
  this.image_hash = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_name !== undefined && args.view_name !== null) {
      this.view_name = args.view_name;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
    if (args.image_hash !== undefined && args.image_hash !== null) {
      this.image_hash = args.image_hash;
    }
  }
};
MapD_create_frontend_view_args.prototype = {};
MapD_create_frontend_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 2);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 3);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 4);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_frontend_view_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_frontend_view_result.prototype = {};
MapD_create_frontend_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_frontend_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_frontend_view_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_args = function(args) {
  this.session = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
MapD_detect_column_types_args.prototype = {};
MapD_detect_column_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 3);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_detect_column_types_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TDetectResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_detect_column_types_result.prototype = {};
MapD_detect_column_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TDetectResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_detect_column_types_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_detect_column_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.row_desc = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row_desc !== undefined && args.row_desc !== null) {
      this.row_desc = Thrift.copyList(args.row_desc, [TColumnType]);
    }
  }
};
MapD_create_table_args.prototype = {};
MapD_create_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.row_desc = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = new TColumnType();
          elem190.read(input);
          this.row_desc.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter191 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter191))
      {
        iter191 = this.row_desc[iter191];
        iter191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_table_result.prototype = {};
MapD_create_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_args = function(args) {
  this.session = null;
  this.table_name = null;
  this.file_name = null;
  this.copy_params = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
    if (args.copy_params !== undefined && args.copy_params !== null) {
      this.copy_params = new TCopyParams(args.copy_params);
    }
  }
};
MapD_import_table_args.prototype = {};
MapD_import_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 3);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 4);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_result = function(args) {
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_table_result.prototype = {};
MapD_import_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_args = function(args) {
  this.session = null;
  this.import_id = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.import_id !== undefined && args.import_id !== null) {
      this.import_id = args.import_id;
    }
  }
};
MapD_import_table_status_args.prototype = {};
MapD_import_table_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.import_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.import_id !== null && this.import_id !== undefined) {
    output.writeFieldBegin('import_id', Thrift.Type.STRING, 2);
    output.writeString(this.import_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_import_table_status_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TImportStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_import_table_status_result.prototype = {};
MapD_import_table_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TImportStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_import_table_status_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_import_table_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_args = function(args) {
  this.session = null;
  this.link = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
  }
};
MapD_get_link_view_args.prototype = {};
MapD_get_link_view_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 2);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_get_link_view_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TFrontendView(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_get_link_view_result.prototype = {};
MapD_get_link_view_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TFrontendView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_get_link_view_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_get_link_view_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_args = function(args) {
  this.session = null;
  this.view_state = null;
  if (args) {
    if (args.session !== undefined && args.session !== null) {
      this.session = args.session;
    }
    if (args.view_state !== undefined && args.view_state !== null) {
      this.view_state = args.view_state;
    }
  }
};
MapD_create_link_args.prototype = {};
MapD_create_link_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.session = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_args.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_args');
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.I32, 1);
    output.writeI32(this.session);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapD_create_link_result = function(args) {
  this.success = null;
  this.e = null;
  this.te = null;
  if (args instanceof TMapDException) {
    this.e = args;
    return;
  }
  if (args instanceof ThriftException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
  }
};
MapD_create_link_result.prototype = {};
MapD_create_link_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TMapDException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ThriftException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MapD_create_link_result.prototype.write = function(output) {
  output.writeStructBegin('MapD_create_link_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MapDClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MapDClient.prototype = {};
MapDClient.prototype.connect = function(user, passwd, dbname, callback) {
  this.send_connect(user, passwd, dbname, callback); 
  if (!callback) {
    return this.recv_connect();
  }
};

MapDClient.prototype.send_connect = function(user, passwd, dbname, callback) {
  this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_connect_args();
  args.user = user;
  args.passwd = passwd;
  args.dbname = dbname;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_connect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_connect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_connect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'connect failed: unknown result';
};
MapDClient.prototype.disconnect = function(session, callback) {
  this.send_disconnect(session, callback); 
  if (!callback) {
  this.recv_disconnect();
  }
};

MapDClient.prototype.send_disconnect = function(session, callback) {
  this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_disconnect_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_disconnect();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_disconnect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_disconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.get_server_status = function(session, callback) {
  this.send_get_server_status(session, callback); 
  if (!callback) {
    return this.recv_get_server_status();
  }
};

MapDClient.prototype.send_get_server_status = function(session, callback) {
  this.output.writeMessageBegin('get_server_status', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_server_status_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_server_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_server_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_server_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_server_status failed: unknown result';
};
MapDClient.prototype.sql_execute = function(session, query, column_format, callback) {
  this.send_sql_execute(session, query, column_format, callback); 
  if (!callback) {
    return this.recv_sql_execute();
  }
};

MapDClient.prototype.send_sql_execute = function(session, query, column_format, callback) {
  this.output.writeMessageBegin('sql_execute', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_sql_execute_args();
  args.session = session;
  args.query = query;
  args.column_format = column_format;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_sql_execute();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_sql_execute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_sql_execute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'sql_execute failed: unknown result';
};
MapDClient.prototype.get_table_descriptor = function(session, table_name, callback) {
  this.send_get_table_descriptor(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_table_descriptor();
  }
};

MapDClient.prototype.send_get_table_descriptor = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_table_descriptor', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_table_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_table_descriptor();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_table_descriptor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_table_descriptor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_table_descriptor failed: unknown result';
};
MapDClient.prototype.get_row_descriptor = function(session, table_name, callback) {
  this.send_get_row_descriptor(session, table_name, callback); 
  if (!callback) {
    return this.recv_get_row_descriptor();
  }
};

MapDClient.prototype.send_get_row_descriptor = function(session, table_name, callback) {
  this.output.writeMessageBegin('get_row_descriptor', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_row_descriptor_args();
  args.session = session;
  args.table_name = table_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_row_descriptor();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_row_descriptor = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_row_descriptor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_row_descriptor failed: unknown result';
};
MapDClient.prototype.get_frontend_view = function(session, view_name, callback) {
  this.send_get_frontend_view(session, view_name, callback); 
  if (!callback) {
    return this.recv_get_frontend_view();
  }
};

MapDClient.prototype.send_get_frontend_view = function(session, view_name, callback) {
  this.output.writeMessageBegin('get_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_frontend_view failed: unknown result';
};
MapDClient.prototype.get_tables = function(session, callback) {
  this.send_get_tables(session, callback); 
  if (!callback) {
    return this.recv_get_tables();
  }
};

MapDClient.prototype.send_get_tables = function(session, callback) {
  this.output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_tables_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_tables();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_tables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_tables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_tables failed: unknown result';
};
MapDClient.prototype.get_users = function(callback) {
  this.send_get_users(callback); 
  if (!callback) {
    return this.recv_get_users();
  }
};

MapDClient.prototype.send_get_users = function(callback) {
  this.output.writeMessageBegin('get_users', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_users_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_users();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_users = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_users_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_users failed: unknown result';
};
MapDClient.prototype.get_databases = function(callback) {
  this.send_get_databases(callback); 
  if (!callback) {
    return this.recv_get_databases();
  }
};

MapDClient.prototype.send_get_databases = function(callback) {
  this.output.writeMessageBegin('get_databases', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_databases_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_databases();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_databases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_databases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_databases failed: unknown result';
};
MapDClient.prototype.get_frontend_views = function(session, callback) {
  this.send_get_frontend_views(session, callback); 
  if (!callback) {
    return this.recv_get_frontend_views();
  }
};

MapDClient.prototype.send_get_frontend_views = function(session, callback) {
  this.output.writeMessageBegin('get_frontend_views', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_frontend_views_args();
  args.session = session;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_frontend_views();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_frontend_views = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_frontend_views_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_frontend_views failed: unknown result';
};
MapDClient.prototype.set_execution_mode = function(session, mode, callback) {
  this.send_set_execution_mode(session, mode, callback); 
  if (!callback) {
  this.recv_set_execution_mode();
  }
};

MapDClient.prototype.send_set_execution_mode = function(session, mode, callback) {
  this.output.writeMessageBegin('set_execution_mode', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_set_execution_mode_args();
  args.session = session;
  args.mode = mode;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_set_execution_mode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_set_execution_mode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_set_execution_mode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.get_version = function(callback) {
  this.send_get_version(callback); 
  if (!callback) {
    return this.recv_get_version();
  }
};

MapDClient.prototype.send_get_version = function(callback) {
  this.output.writeMessageBegin('get_version', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_version_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_version();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_version = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_version_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_version failed: unknown result';
};
MapDClient.prototype.load_table_binary = function(session, table_name, rows, callback) {
  this.send_load_table_binary(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table_binary();
  }
};

MapDClient.prototype.send_load_table_binary = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table_binary', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_load_table_binary_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table_binary();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_load_table_binary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_load_table_binary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.load_table = function(session, table_name, rows, callback) {
  this.send_load_table(session, table_name, rows, callback); 
  if (!callback) {
  this.recv_load_table();
  }
};

MapDClient.prototype.send_load_table = function(session, table_name, rows, callback) {
  this.output.writeMessageBegin('load_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_load_table_args();
  args.session = session;
  args.table_name = table_name;
  args.rows = rows;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_load_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_load_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_load_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.render = function(session, query, render_type, render_properties, col_render_properties, callback) {
  this.send_render(session, query, render_type, render_properties, col_render_properties, callback); 
  if (!callback) {
    return this.recv_render();
  }
};

MapDClient.prototype.send_render = function(session, query, render_type, render_properties, col_render_properties, callback) {
  this.output.writeMessageBegin('render', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_render_args();
  args.session = session;
  args.query = query;
  args.render_type = render_type;
  args.render_properties = render_properties;
  args.col_render_properties = col_render_properties;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_render();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_render = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_render_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'render failed: unknown result';
};
MapDClient.prototype.create_frontend_view = function(session, view_name, view_state, image_hash, callback) {
  this.send_create_frontend_view(session, view_name, view_state, image_hash, callback); 
  if (!callback) {
  this.recv_create_frontend_view();
  }
};

MapDClient.prototype.send_create_frontend_view = function(session, view_name, view_state, image_hash, callback) {
  this.output.writeMessageBegin('create_frontend_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_frontend_view_args();
  args.session = session;
  args.view_name = view_name;
  args.view_state = view_state;
  args.image_hash = image_hash;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_frontend_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_frontend_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_frontend_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.detect_column_types = function(session, file_name, copy_params, callback) {
  this.send_detect_column_types(session, file_name, copy_params, callback); 
  if (!callback) {
    return this.recv_detect_column_types();
  }
};

MapDClient.prototype.send_detect_column_types = function(session, file_name, copy_params, callback) {
  this.output.writeMessageBegin('detect_column_types', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_detect_column_types_args();
  args.session = session;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_detect_column_types();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_detect_column_types = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_detect_column_types_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'detect_column_types failed: unknown result';
};
MapDClient.prototype.create_table = function(session, table_name, row_desc, callback) {
  this.send_create_table(session, table_name, row_desc, callback); 
  if (!callback) {
  this.recv_create_table();
  }
};

MapDClient.prototype.send_create_table = function(session, table_name, row_desc, callback) {
  this.output.writeMessageBegin('create_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_table_args();
  args.session = session;
  args.table_name = table_name;
  args.row_desc = row_desc;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.import_table = function(session, table_name, file_name, copy_params, callback) {
  this.send_import_table(session, table_name, file_name, copy_params, callback); 
  if (!callback) {
  this.recv_import_table();
  }
};

MapDClient.prototype.send_import_table = function(session, table_name, file_name, copy_params, callback) {
  this.output.writeMessageBegin('import_table', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_table_args();
  args.session = session;
  args.table_name = table_name;
  args.file_name = file_name;
  args.copy_params = copy_params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_table = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_table_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  return;
};
MapDClient.prototype.import_table_status = function(session, import_id, callback) {
  this.send_import_table_status(session, import_id, callback); 
  if (!callback) {
    return this.recv_import_table_status();
  }
};

MapDClient.prototype.send_import_table_status = function(session, import_id, callback) {
  this.output.writeMessageBegin('import_table_status', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_import_table_status_args();
  args.session = session;
  args.import_id = import_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_import_table_status();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_import_table_status = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_import_table_status_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'import_table_status failed: unknown result';
};
MapDClient.prototype.get_link_view = function(session, link, callback) {
  this.send_get_link_view(session, link, callback); 
  if (!callback) {
    return this.recv_get_link_view();
  }
};

MapDClient.prototype.send_get_link_view = function(session, link, callback) {
  this.output.writeMessageBegin('get_link_view', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_get_link_view_args();
  args.session = session;
  args.link = link;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_get_link_view();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_get_link_view = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_get_link_view_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_link_view failed: unknown result';
};
MapDClient.prototype.create_link = function(session, view_state, callback) {
  this.send_create_link(session, view_state, callback); 
  if (!callback) {
    return this.recv_create_link();
  }
};

MapDClient.prototype.send_create_link = function(session, view_state, callback) {
  this.output.writeMessageBegin('create_link', Thrift.MessageType.CALL, this.seqid);
  var args = new MapD_create_link_args();
  args.session = session;
  args.view_state = view_state;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_create_link();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

MapDClient.prototype.recv_create_link = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MapD_create_link_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.te) {
    throw result.te;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create_link failed: unknown result';
};
