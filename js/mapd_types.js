//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TDatumType = {
  'SMALLINT' : 0,
  'INT' : 1,
  'BIGINT' : 2,
  'FLOAT' : 3,
  'DECIMAL' : 4,
  'DOUBLE' : 5,
  'STR' : 6,
  'TIME' : 7,
  'TIMESTAMP' : 8,
  'DATE' : 9,
  'BOOL' : 10
};
TEncodingType = {
  'NONE' : 0,
  'FIXED' : 1,
  'RL' : 2,
  'DIFF' : 3,
  'DICT' : 4,
  'SPARSE' : 5
};
TExecuteMode = {
  'HYBRID' : 0,
  'GPU' : 1,
  'CPU' : 2
};
TDatumVal = function(args) {
  this.int_val = null;
  this.real_val = null;
  this.str_val = null;
  this.arr_val = null;
  if (args) {
    if (args.int_val !== undefined) {
      this.int_val = args.int_val;
    }
    if (args.real_val !== undefined) {
      this.real_val = args.real_val;
    }
    if (args.str_val !== undefined) {
      this.str_val = args.str_val;
    }
    if (args.arr_val !== undefined) {
      this.arr_val = args.arr_val;
    }
  }
};
TDatumVal.prototype = {};
TDatumVal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.int_val = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.real_val = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.str_val = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.arr_val = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TDatum();
          elem6.read(input);
          this.arr_val.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDatumVal.prototype.write = function(output) {
  output.writeStructBegin('TDatumVal');
  if (this.int_val !== null && this.int_val !== undefined) {
    output.writeFieldBegin('int_val', Thrift.Type.I64, 1);
    output.writeI64(this.int_val);
    output.writeFieldEnd();
  }
  if (this.real_val !== null && this.real_val !== undefined) {
    output.writeFieldBegin('real_val', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.real_val);
    output.writeFieldEnd();
  }
  if (this.str_val !== null && this.str_val !== undefined) {
    output.writeFieldBegin('str_val', Thrift.Type.STRING, 3);
    output.writeString(this.str_val);
    output.writeFieldEnd();
  }
  if (this.arr_val !== null && this.arr_val !== undefined) {
    output.writeFieldBegin('arr_val', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.arr_val.length);
    for (var iter7 in this.arr_val)
    {
      if (this.arr_val.hasOwnProperty(iter7))
      {
        iter7 = this.arr_val[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDatum = function(args) {
  this.val = null;
  this.is_null = null;
  if (args) {
    if (args.val !== undefined) {
      this.val = args.val;
    }
    if (args.is_null !== undefined) {
      this.is_null = args.is_null;
    }
  }
};
TDatum.prototype = {};
TDatum.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.val = new TDatumVal();
        this.val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_null = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDatum.prototype.write = function(output) {
  output.writeStructBegin('TDatum');
  if (this.val !== null && this.val !== undefined) {
    output.writeFieldBegin('val', Thrift.Type.STRUCT, 1);
    this.val.write(output);
    output.writeFieldEnd();
  }
  if (this.is_null !== null && this.is_null !== undefined) {
    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_null);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringValue = function(args) {
  this.str_val = null;
  this.is_null = null;
  if (args) {
    if (args.str_val !== undefined) {
      this.str_val = args.str_val;
    }
    if (args.is_null !== undefined) {
      this.is_null = args.is_null;
    }
  }
};
TStringValue.prototype = {};
TStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.str_val = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_null = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringValue.prototype.write = function(output) {
  output.writeStructBegin('TStringValue');
  if (this.str_val !== null && this.str_val !== undefined) {
    output.writeFieldBegin('str_val', Thrift.Type.STRING, 1);
    output.writeString(this.str_val);
    output.writeFieldEnd();
  }
  if (this.is_null !== null && this.is_null !== undefined) {
    output.writeFieldBegin('is_null', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_null);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTypeInfo = function(args) {
  this.type = null;
  this.encoding = null;
  this.nullable = null;
  this.is_array = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.encoding !== undefined) {
      this.encoding = args.encoding;
    }
    if (args.nullable !== undefined) {
      this.nullable = args.nullable;
    }
    if (args.is_array !== undefined) {
      this.is_array = args.is_array;
    }
  }
};
TTypeInfo.prototype = {};
TTypeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.encoding = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.nullable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_array = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeInfo.prototype.write = function(output) {
  output.writeStructBegin('TTypeInfo');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.encoding !== null && this.encoding !== undefined) {
    output.writeFieldBegin('encoding', Thrift.Type.I32, 4);
    output.writeI32(this.encoding);
    output.writeFieldEnd();
  }
  if (this.nullable !== null && this.nullable !== undefined) {
    output.writeFieldBegin('nullable', Thrift.Type.BOOL, 2);
    output.writeBool(this.nullable);
    output.writeFieldEnd();
  }
  if (this.is_array !== null && this.is_array !== undefined) {
    output.writeFieldBegin('is_array', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_array);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumnType = function(args) {
  this.col_name = null;
  this.col_type = null;
  if (args) {
    if (args.col_name !== undefined) {
      this.col_name = args.col_name;
    }
    if (args.col_type !== undefined) {
      this.col_type = args.col_type;
    }
  }
};
TColumnType.prototype = {};
TColumnType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.col_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.col_type = new TTypeInfo();
        this.col_type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnType.prototype.write = function(output) {
  output.writeStructBegin('TColumnType');
  if (this.col_name !== null && this.col_name !== undefined) {
    output.writeFieldBegin('col_name', Thrift.Type.STRING, 1);
    output.writeString(this.col_name);
    output.writeFieldEnd();
  }
  if (this.col_type !== null && this.col_type !== undefined) {
    output.writeFieldBegin('col_type', Thrift.Type.STRUCT, 2);
    this.col_type.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRow = function(args) {
  this.cols = null;
  if (args) {
    if (args.cols !== undefined) {
      this.cols = args.cols;
    }
  }
};
TRow.prototype = {};
TRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.cols = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new TDatum();
          elem14.read(input);
          this.cols.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRow.prototype.write = function(output) {
  output.writeStructBegin('TRow');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter15 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter15))
      {
        iter15 = this.cols[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumnData = function(args) {
  this.int_col = null;
  this.real_col = null;
  this.str_col = null;
  this.arr_col = null;
  if (args) {
    if (args.int_col !== undefined) {
      this.int_col = args.int_col;
    }
    if (args.real_col !== undefined) {
      this.real_col = args.real_col;
    }
    if (args.str_col !== undefined) {
      this.str_col = args.str_col;
    }
    if (args.arr_col !== undefined) {
      this.arr_col = args.arr_col;
    }
  }
};
TColumnData.prototype = {};
TColumnData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.int_col = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI64().value;
          this.int_col.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.real_col = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readDouble().value;
          this.real_col.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.str_col = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = input.readString().value;
          this.str_col.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size37 = 0;
        var _rtmp341;
        this.arr_col = [];
        var _etype40 = 0;
        _rtmp341 = input.readListBegin();
        _etype40 = _rtmp341.etype;
        _size37 = _rtmp341.size;
        for (var _i42 = 0; _i42 < _size37; ++_i42)
        {
          var elem43 = null;
          elem43 = new TColumn();
          elem43.read(input);
          this.arr_col.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnData.prototype.write = function(output) {
  output.writeStructBegin('TColumnData');
  if (this.int_col !== null && this.int_col !== undefined) {
    output.writeFieldBegin('int_col', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.int_col.length);
    for (var iter44 in this.int_col)
    {
      if (this.int_col.hasOwnProperty(iter44))
      {
        iter44 = this.int_col[iter44];
        output.writeI64(iter44);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.real_col !== null && this.real_col !== undefined) {
    output.writeFieldBegin('real_col', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.real_col.length);
    for (var iter45 in this.real_col)
    {
      if (this.real_col.hasOwnProperty(iter45))
      {
        iter45 = this.real_col[iter45];
        output.writeDouble(iter45);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.str_col !== null && this.str_col !== undefined) {
    output.writeFieldBegin('str_col', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.str_col.length);
    for (var iter46 in this.str_col)
    {
      if (this.str_col.hasOwnProperty(iter46))
      {
        iter46 = this.str_col[iter46];
        output.writeString(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.arr_col !== null && this.arr_col !== undefined) {
    output.writeFieldBegin('arr_col', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.arr_col.length);
    for (var iter47 in this.arr_col)
    {
      if (this.arr_col.hasOwnProperty(iter47))
      {
        iter47 = this.arr_col[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumn = function(args) {
  this.data = null;
  this.nulls = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.nulls !== undefined) {
      this.nulls = args.nulls;
    }
  }
};
TColumn.prototype = {};
TColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new TColumnData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.nulls = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readBool().value;
          this.nulls.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumn.prototype.write = function(output) {
  output.writeStructBegin('TColumn');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.BOOL, this.nulls.length);
    for (var iter55 in this.nulls)
    {
      if (this.nulls.hasOwnProperty(iter55))
      {
        iter55 = this.nulls[iter55];
        output.writeBool(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringRow = function(args) {
  this.cols = null;
  if (args) {
    if (args.cols !== undefined) {
      this.cols = args.cols;
    }
  }
};
TStringRow.prototype = {};
TStringRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.cols = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new TStringValue();
          elem62.read(input);
          this.cols.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringRow.prototype.write = function(output) {
  output.writeStructBegin('TStringRow');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter63 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter63))
      {
        iter63 = this.cols[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRowSet = function(args) {
  this.row_desc = null;
  this.rows = null;
  this.columns = null;
  this.is_columnar = null;
  if (args) {
    if (args.row_desc !== undefined) {
      this.row_desc = args.row_desc;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.is_columnar !== undefined) {
      this.is_columnar = args.is_columnar;
    }
  }
};
TRowSet.prototype = {};
TRowSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.row_desc = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new TColumnType();
          elem70.read(input);
          this.row_desc.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.rows = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = new TRow();
          elem77.read(input);
          this.rows.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.columns = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new TColumn();
          elem84.read(input);
          this.columns.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_columnar = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRowSet.prototype.write = function(output) {
  output.writeStructBegin('TRowSet');
  if (this.row_desc !== null && this.row_desc !== undefined) {
    output.writeFieldBegin('row_desc', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_desc.length);
    for (var iter85 in this.row_desc)
    {
      if (this.row_desc.hasOwnProperty(iter85))
      {
        iter85 = this.row_desc[iter85];
        iter85.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter86 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter86))
      {
        iter86 = this.rows[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter87 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter87))
      {
        iter87 = this.columns[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.is_columnar !== null && this.is_columnar !== undefined) {
    output.writeFieldBegin('is_columnar', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_columnar);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TQueryResult = function(args) {
  this.row_set = null;
  this.execution_time_ms = null;
  this.nonce = null;
  if (args) {
    if (args.row_set !== undefined) {
      this.row_set = args.row_set;
    }
    if (args.execution_time_ms !== undefined) {
      this.execution_time_ms = args.execution_time_ms;
    }
    if (args.nonce !== undefined) {
      this.nonce = args.nonce;
    }
  }
};
TQueryResult.prototype = {};
TQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.row_set = new TRowSet();
        this.row_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.execution_time_ms = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TQueryResult.prototype.write = function(output) {
  output.writeStructBegin('TQueryResult');
  if (this.row_set !== null && this.row_set !== undefined) {
    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
    this.row_set.write(output);
    output.writeFieldEnd();
  }
  if (this.execution_time_ms !== null && this.execution_time_ms !== undefined) {
    output.writeFieldBegin('execution_time_ms', Thrift.Type.I64, 2);
    output.writeI64(this.execution_time_ms);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 3);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBInfo = function(args) {
  this.db_name = null;
  this.db_owner = null;
  if (args) {
    if (args.db_name !== undefined) {
      this.db_name = args.db_name;
    }
    if (args.db_owner !== undefined) {
      this.db_owner = args.db_owner;
    }
  }
};
TDBInfo.prototype = {};
TDBInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.db_owner = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBInfo.prototype.write = function(output) {
  output.writeStructBegin('TDBInfo');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.db_owner !== null && this.db_owner !== undefined) {
    output.writeFieldBegin('db_owner', Thrift.Type.STRING, 2);
    output.writeString(this.db_owner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMapDException = function(args) {
  this.error_msg = null;
  if (args) {
    if (args.error_msg !== undefined) {
      this.error_msg = args.error_msg;
    }
  }
};
Thrift.inherits(TMapDException, Thrift.TException);
TMapDException.prototype.name = 'TMapDException';
TMapDException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.error_msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMapDException.prototype.write = function(output) {
  output.writeStructBegin('TMapDException');
  if (this.error_msg !== null && this.error_msg !== undefined) {
    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);
    output.writeString(this.error_msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ThriftException = function(args) {
  this.error_msg = null;
  if (args) {
    if (args.error_msg !== undefined) {
      this.error_msg = args.error_msg;
    }
  }
};
Thrift.inherits(ThriftException, Thrift.TException);
ThriftException.prototype.name = 'ThriftException';
ThriftException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.error_msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftException.prototype.write = function(output) {
  output.writeStructBegin('ThriftException');
  if (this.error_msg !== null && this.error_msg !== undefined) {
    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 1);
    output.writeString(this.error_msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenderProperty = function(args) {
  this.property_type = null;
  this.property_value = null;
  if (args) {
    if (args.property_type !== undefined) {
      this.property_type = args.property_type;
    }
    if (args.property_value !== undefined) {
      this.property_value = args.property_value;
    }
  }
};
TRenderProperty.prototype = {};
TRenderProperty.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.property_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.property_value = new TDatumVal();
        this.property_value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenderProperty.prototype.write = function(output) {
  output.writeStructBegin('TRenderProperty');
  if (this.property_type !== null && this.property_type !== undefined) {
    output.writeFieldBegin('property_type', Thrift.Type.I32, 1);
    output.writeI32(this.property_type);
    output.writeFieldEnd();
  }
  if (this.property_value !== null && this.property_value !== undefined) {
    output.writeFieldBegin('property_value', Thrift.Type.STRUCT, 2);
    this.property_value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCopyParams = function(args) {
  this.delimiter = null;
  this.null_str = null;
  this.has_header = null;
  this.quoted = null;
  this.quote = null;
  this.escape = null;
  this.line_delim = null;
  this.array_delim = null;
  this.array_begin = null;
  this.array_end = null;
  this.threads = null;
  if (args) {
    if (args.delimiter !== undefined) {
      this.delimiter = args.delimiter;
    }
    if (args.null_str !== undefined) {
      this.null_str = args.null_str;
    }
    if (args.has_header !== undefined) {
      this.has_header = args.has_header;
    }
    if (args.quoted !== undefined) {
      this.quoted = args.quoted;
    }
    if (args.quote !== undefined) {
      this.quote = args.quote;
    }
    if (args.escape !== undefined) {
      this.escape = args.escape;
    }
    if (args.line_delim !== undefined) {
      this.line_delim = args.line_delim;
    }
    if (args.array_delim !== undefined) {
      this.array_delim = args.array_delim;
    }
    if (args.array_begin !== undefined) {
      this.array_begin = args.array_begin;
    }
    if (args.array_end !== undefined) {
      this.array_end = args.array_end;
    }
    if (args.threads !== undefined) {
      this.threads = args.threads;
    }
  }
};
TCopyParams.prototype = {};
TCopyParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.delimiter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.null_str = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.has_header = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.quoted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.quote = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.escape = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.line_delim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.array_delim = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.array_begin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.array_end = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.threads = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCopyParams.prototype.write = function(output) {
  output.writeStructBegin('TCopyParams');
  if (this.delimiter !== null && this.delimiter !== undefined) {
    output.writeFieldBegin('delimiter', Thrift.Type.STRING, 1);
    output.writeString(this.delimiter);
    output.writeFieldEnd();
  }
  if (this.null_str !== null && this.null_str !== undefined) {
    output.writeFieldBegin('null_str', Thrift.Type.STRING, 2);
    output.writeString(this.null_str);
    output.writeFieldEnd();
  }
  if (this.has_header !== null && this.has_header !== undefined) {
    output.writeFieldBegin('has_header', Thrift.Type.BOOL, 3);
    output.writeBool(this.has_header);
    output.writeFieldEnd();
  }
  if (this.quoted !== null && this.quoted !== undefined) {
    output.writeFieldBegin('quoted', Thrift.Type.BOOL, 4);
    output.writeBool(this.quoted);
    output.writeFieldEnd();
  }
  if (this.quote !== null && this.quote !== undefined) {
    output.writeFieldBegin('quote', Thrift.Type.STRING, 5);
    output.writeString(this.quote);
    output.writeFieldEnd();
  }
  if (this.escape !== null && this.escape !== undefined) {
    output.writeFieldBegin('escape', Thrift.Type.STRING, 6);
    output.writeString(this.escape);
    output.writeFieldEnd();
  }
  if (this.line_delim !== null && this.line_delim !== undefined) {
    output.writeFieldBegin('line_delim', Thrift.Type.STRING, 7);
    output.writeString(this.line_delim);
    output.writeFieldEnd();
  }
  if (this.array_delim !== null && this.array_delim !== undefined) {
    output.writeFieldBegin('array_delim', Thrift.Type.STRING, 8);
    output.writeString(this.array_delim);
    output.writeFieldEnd();
  }
  if (this.array_begin !== null && this.array_begin !== undefined) {
    output.writeFieldBegin('array_begin', Thrift.Type.STRING, 9);
    output.writeString(this.array_begin);
    output.writeFieldEnd();
  }
  if (this.array_end !== null && this.array_end !== undefined) {
    output.writeFieldBegin('array_end', Thrift.Type.STRING, 10);
    output.writeString(this.array_end);
    output.writeFieldEnd();
  }
  if (this.threads !== null && this.threads !== undefined) {
    output.writeFieldBegin('threads', Thrift.Type.I32, 11);
    output.writeI32(this.threads);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDetectResult = function(args) {
  this.row_set = null;
  this.copy_params = null;
  if (args) {
    if (args.row_set !== undefined) {
      this.row_set = args.row_set;
    }
    if (args.copy_params !== undefined) {
      this.copy_params = args.copy_params;
    }
  }
};
TDetectResult.prototype = {};
TDetectResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.row_set = new TRowSet();
        this.row_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.copy_params = new TCopyParams();
        this.copy_params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDetectResult.prototype.write = function(output) {
  output.writeStructBegin('TDetectResult');
  if (this.row_set !== null && this.row_set !== undefined) {
    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 1);
    this.row_set.write(output);
    output.writeFieldEnd();
  }
  if (this.copy_params !== null && this.copy_params !== undefined) {
    output.writeFieldBegin('copy_params', Thrift.Type.STRUCT, 2);
    this.copy_params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TImportStatus = function(args) {
  this.elapsed = null;
  this.rows_completed = null;
  this.rows_estimated = null;
  if (args) {
    if (args.elapsed !== undefined) {
      this.elapsed = args.elapsed;
    }
    if (args.rows_completed !== undefined) {
      this.rows_completed = args.rows_completed;
    }
    if (args.rows_estimated !== undefined) {
      this.rows_estimated = args.rows_estimated;
    }
  }
};
TImportStatus.prototype = {};
TImportStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.elapsed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.rows_completed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.rows_estimated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TImportStatus.prototype.write = function(output) {
  output.writeStructBegin('TImportStatus');
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.I64, 1);
    output.writeI64(this.elapsed);
    output.writeFieldEnd();
  }
  if (this.rows_completed !== null && this.rows_completed !== undefined) {
    output.writeFieldBegin('rows_completed', Thrift.Type.I64, 2);
    output.writeI64(this.rows_completed);
    output.writeFieldEnd();
  }
  if (this.rows_estimated !== null && this.rows_estimated !== undefined) {
    output.writeFieldBegin('rows_estimated', Thrift.Type.I64, 3);
    output.writeI64(this.rows_estimated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFrontendView = function(args) {
  this.view_name = null;
  this.view_state = null;
  this.image_hash = null;
  this.update_time = null;
  if (args) {
    if (args.view_name !== undefined) {
      this.view_name = args.view_name;
    }
    if (args.view_state !== undefined) {
      this.view_state = args.view_state;
    }
    if (args.image_hash !== undefined) {
      this.image_hash = args.image_hash;
    }
    if (args.update_time !== undefined) {
      this.update_time = args.update_time;
    }
  }
};
TFrontendView.prototype = {};
TFrontendView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.view_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.view_state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.image_hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFrontendView.prototype.write = function(output) {
  output.writeStructBegin('TFrontendView');
  if (this.view_name !== null && this.view_name !== undefined) {
    output.writeFieldBegin('view_name', Thrift.Type.STRING, 1);
    output.writeString(this.view_name);
    output.writeFieldEnd();
  }
  if (this.view_state !== null && this.view_state !== undefined) {
    output.writeFieldBegin('view_state', Thrift.Type.STRING, 2);
    output.writeString(this.view_state);
    output.writeFieldEnd();
  }
  if (this.image_hash !== null && this.image_hash !== undefined) {
    output.writeFieldBegin('image_hash', Thrift.Type.STRING, 3);
    output.writeString(this.image_hash);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TServerStatus = function(args) {
  this.read_only = null;
  this.version = null;
  this.rendering_enabled = null;
  if (args) {
    if (args.read_only !== undefined) {
      this.read_only = args.read_only;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.rendering_enabled !== undefined) {
      this.rendering_enabled = args.rendering_enabled;
    }
  }
};
TServerStatus.prototype = {};
TServerStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.read_only = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.rendering_enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TServerStatus.prototype.write = function(output) {
  output.writeStructBegin('TServerStatus');
  if (this.read_only !== null && this.read_only !== undefined) {
    output.writeFieldBegin('read_only', Thrift.Type.BOOL, 1);
    output.writeBool(this.read_only);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.rendering_enabled !== null && this.rendering_enabled !== undefined) {
    output.writeFieldBegin('rendering_enabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.rendering_enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPixel = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
TPixel.prototype = {};
TPixel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.x = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.y = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPixel.prototype.write = function(output) {
  output.writeStructBegin('TPixel');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I64, 1);
    output.writeI64(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I64, 2);
    output.writeI64(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPixelRows = function(args) {
  this.pixel = null;
  this.row_set = null;
  if (args) {
    if (args.pixel !== undefined) {
      this.pixel = args.pixel;
    }
    if (args.row_set !== undefined) {
      this.row_set = args.row_set;
    }
  }
};
TPixelRows.prototype = {};
TPixelRows.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pixel = new TPixel();
        this.pixel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row_set = new TRowSet();
        this.row_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPixelRows.prototype.write = function(output) {
  output.writeStructBegin('TPixelRows');
  if (this.pixel !== null && this.pixel !== undefined) {
    output.writeFieldBegin('pixel', Thrift.Type.STRUCT, 1);
    this.pixel.write(output);
    output.writeFieldEnd();
  }
  if (this.row_set !== null && this.row_set !== undefined) {
    output.writeFieldBegin('row_set', Thrift.Type.STRUCT, 2);
    this.row_set.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPixelResult = function(args) {
  this.pixel_rows = null;
  this.nonce = null;
  if (args) {
    if (args.pixel_rows !== undefined) {
      this.pixel_rows = args.pixel_rows;
    }
    if (args.nonce !== undefined) {
      this.nonce = args.nonce;
    }
  }
};
TPixelResult.prototype = {};
TPixelResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.pixel_rows = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new TPixelRows();
          elem94.read(input);
          this.pixel_rows.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPixelResult.prototype.write = function(output) {
  output.writeStructBegin('TPixelResult');
  if (this.pixel_rows !== null && this.pixel_rows !== undefined) {
    output.writeFieldBegin('pixel_rows', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.pixel_rows.length);
    for (var iter95 in this.pixel_rows)
    {
      if (this.pixel_rows.hasOwnProperty(iter95))
      {
        iter95 = this.pixel_rows[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenderResult = function(args) {
  this.image = null;
  this.nonce = null;
  if (args) {
    if (args.image !== undefined) {
      this.image = args.image;
    }
    if (args.nonce !== undefined) {
      this.nonce = args.nonce;
    }
  }
};
TRenderResult.prototype = {};
TRenderResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nonce = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenderResult.prototype.write = function(output) {
  output.writeStructBegin('TRenderResult');
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 1);
    output.writeBinary(this.image);
    output.writeFieldEnd();
  }
  if (this.nonce !== null && this.nonce !== undefined) {
    output.writeFieldBegin('nonce', Thrift.Type.STRING, 2);
    output.writeString(this.nonce);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

